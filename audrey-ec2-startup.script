#!/bin/bash
#
# Description:
#
# This script will be used on EC2 for configuring the running
# instance based on Cloud Engine configuration supplied at
# launch time in the user data.
#
# For prototype end to end testing this file needs to be
# installed at: /usr/bin/audrey
#

#
# Set path to avoid requiring full path names when executing commands.
#
PATH="/usr/bin:/bin:/usr/sbin:/sbin"

#
# Set path to log file
#
LOG="/var/log/audrey.log"

#
# Define constants
#
EC2_USER_DATA="http://169.254.169.254/2009-04-04/user-data"
PUPPET_ROOT="/usr/share/puppet/cloud_engine/sshd"
PUPPET_USER_DATA="${PUPPET_ROOT}/nodes/default"
PUPPET_EXT_NODE="${PUPPET_ROOT}/node"
CLOUD_INFO="/etc/sysconfig/cloud-info"

#
# For now the EC2 user data established by Audrey is the
# puppet input config data in YAML format but in the future
# the user data may need to be converted from name/value
# pairs.
#
PUPPET_CFG="${PUPPET_USER_DATA}"

#
# Log for debugging
#
echo "" >> ${LOG} 2>&1
echo "*** $(date) ***" >> ${LOG} 2>&1
echo "EC2_USER_DATA: ...... ${EC2_USER_DATA}" >> ${LOG} 2>&1
echo "PUPPET_ROOT: ........ ${PUPPET_ROOT}" >> ${LOG} 2>&1
echo "PUPPET_USER_DATA: ... ${PUPPET_USER_DATA}" >> ${LOG} 2>&1
echo "PUPPET_EXT_NODE: .... ${PUPPET_EXT_NODE}" >>  ${LOG} 2>&1
echo "PUPPET_CFG: ......... ${PUPPET_CFG}" >>  ${LOG} 2>&1

#
# If puppet is not available log an error and exit.
#
which puppet >> /dev/null 2>&1
cmd_result=$?
if [[ ${cmd_result} -ne 0 ]]; then
    echo "Error: no puppet. Exiting" >> ${LOG} 2>&1
    exit 1
fi

#
# What backend cloud is this script running in?
# This info is written to the CLOUD_INFO file when the image is being
# constructed by Image Factory. Currently only EC2 is supported.
#
# Convert to all lower case from matching against expected value.
#
# The following command relies on the format of the data to
# be in the form var=value.
export $(cat /etc/sysconfig/cloud-info |  grep "^CLOUD_TYPE")
CLOUD_TYPE=$(echo ${CLOUD_TYPE} | tr -s  '[:upper:]'  '[:lower:]' )
if [[ "${CLOUD_TYPE}" !=  "\"ec2\"" ]]; then
    echo "Error: Not running on EC2. Exiting" >> ${LOG} 2>&1
    exit 1
fi

#
# Get the base64(1) encoded EC2 user data which specifies the puppet input.
#
curl ${EC2_USER_DATA} 2>/dev/null | base64 -d > ${PUPPET_USER_DATA}
cmd_result=$?
if [[ ${cmd_result} != 0 ]]; then
    echo "Error: Faild to access the EC2 user data. Exiting" >> ${LOG} 2>&1
    exit 1
fi

#
# Exercise puppet using the user specified puppet input.
#
echo | puppet --verbose --manifest ${PUPPET_ROOT}/manifests/defaults.pp \
    --modulepath ${PUPPET_ROOT}/modules --external_nodes ${PUPPET_EXT_NODE} \
    --node_terminus exec --no-report >> ${LOG} 2>&1
cmd_result=$?
if [[ ${cmd_result} != 0 ]]; then
    echo "Error: puppet failure. Exiting" >> ${LOG} 2>&1
    exit 1
fi

#
# Log netstat output to indicate established configuration.
#
echo "" >> ${LOG} 2>&1
netstat -lpn >> ${LOG} 2>&1
cmd_result=$?
if [[ ${cmd_result} != 0 ]]; then
    echo "Error: netstat failure. Exiting" >> ${LOG} 2>&1
    exit 1
fi




echo "Finished Exiting" >> ${LOG} 2>&1
exit 0




